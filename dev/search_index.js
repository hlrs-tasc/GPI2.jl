var documenterSearchIndex = {"docs":
[{"location":"license/#License","page":"License","title":"License","text":"","category":"section"},{"location":"license/","page":"License","title":"License","text":"MIT LicenseCopyright (c) 2022 Michael Schlottke-LakemperPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","category":"page"},{"location":"reference/#GPI2.jl-API","page":"Reference","title":"GPI2.jl API","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = GPI2","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [GPI2, GPI2.LibGPI2]","category":"page"},{"location":"reference/#GPI2.gaspi_logger-Tuple{}","page":"Reference","title":"GPI2.gaspi_logger","text":"gaspi_logger()\n\nRun the gaspi_logger tool of the GPI-2 library.\n\nwarning: Experimental implementation\nThis is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.gaspi_run-Tuple{}","page":"Reference","title":"GPI2.gaspi_run","text":"gaspi_run()\n\nRun the gaspi_run tool of the GPI-2 library.\n\nwarning: Experimental implementation\nThis is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.use_jll_bindings-Tuple{}","page":"Reference","title":"GPI2.use_jll_bindings","text":"use_jll_bindings()\n\nConfigure GPI2.jl to use the C bindings file provided by the JLL package.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.use_jll_library-Tuple{}","page":"Reference","title":"GPI2.use_jll_library","text":"use_jll_library()\n\nConfigure GPI2.jl to use libGPI2.so binary provided by the JLL package.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.use_system_bindings-Tuple{Any}","page":"Reference","title":"GPI2.use_system_bindings","text":"use_system_bindings(path)\n\nConfigure GPI2.jl to use the C bindings file provided on the local system at path.\n\nwarning: Experimental implementation\nThis is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.use_system_library-Tuple{Any}","page":"Reference","title":"GPI2.use_system_library","text":"use_system_library(path)\n\nConfigure GPI2.jl to use libGPI2.so binary provided on the local system at path.\n\nwarning: Experimental implementation\nThis is an experimental feature and may change in future releases.\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_alloc_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_alloc_t","text":"gaspi_alloc_t\n\nMemory allocation policy.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_config","page":"Reference","title":"GPI2.LibGPI2.gaspi_config","text":"gaspi_config\n\nA structure with configuration.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_config_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_config_t","text":"A structure with configuration.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_datatype_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_datatype_t","text":"gaspi_datatype_t\n\nElement types for Collective communication.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_dev_config_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_dev_config_t","text":"gaspi_dev_config_t\n\nNetwork Device configuration.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_network_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_network_t","text":"gaspi_network_t\n\nNetwork type.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_operation_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_operation_t","text":"gaspi_operation_t\n\nOperations for Collective communication.\n\nEnumerator Note\nGASPI_OP_MIN Minimum\nGASPI_OP_MAX Maximum\nGASPI_OP_SUM Sum\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_return_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_return_t","text":"gaspi_return_t\n\nFunctions return type.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_state_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_state_t","text":"gaspi_state_t\n\nState of queue.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_statistic_argument_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_statistic_argument_t","text":"gaspi_statistic_argument_t\n\nStatistical information\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_topology_t","page":"Reference","title":"GPI2.LibGPI2.gaspi_topology_t","text":"gaspi_topology_t\n\nTopology building strategy.\n\n\n\n\n\n","category":"type"},{"location":"reference/#GPI2.LibGPI2.gaspi_allreduce-NTuple{7, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_allreduce","text":"gaspi_allreduce(buffer_send, buffer_receive, num, operation, datatype, group, timeout_ms)\n\nAll Reduce collective operation.\n\nParameters\n\nbuffer_send: The buffer with data for the operation.\nbuffer_receive: The buffer to receive the result of the operation.\nnum: The number of data elements in the buffer (beware of maximum - use gaspi_allreduce_elem_max).\noperation: The type of operations (see gaspi_operation_t).\ndatatyp: Type of data (see gaspi_datatype_t).\ngroup: The group involved in the operation.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_allreduce (const gaspi_pointer_t buffer_send, gaspi_pointer_t const buffer_receive, const gaspi_number_t num, const gaspi_operation_t operation, const gaspi_datatype_t datatype, const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_allreduce_buf_size-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_allreduce_buf_size","text":"gaspi_allreduce_buf_size(buf_size)\n\nGet the internal buffer size for gaspi_allreduce_user.\n\nParameters\n\nbuf_size: Output parameter with the buffer size.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_allreduce_buf_size (gaspi_size_t * const buf_size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_allreduce_elem_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_allreduce_elem_max","text":"gaspi_allreduce_elem_max(elem_max)\n\nGet the maximum number of elements allowed in gaspi_allreduce.\n\nParameters\n\nelem_max: Output parameter with the maximum number of elements.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_allreduce_elem_max (gaspi_number_t * const elem_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_allreduce_user-NTuple{8, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_allreduce_user","text":"gaspi_allreduce_user(buffer_send, buffer_receive, num, element_size, reduce_operation, reduce_state, group, timeout_ms)\n\nPrototype\n\ngaspi_return_t gaspi_allreduce_user (const gaspi_pointer_t buffer_send, gaspi_pointer_t const buffer_receive, const gaspi_number_t num, const gaspi_size_t element_size, gaspi_reduce_operation_t const reduce_operation, gaspi_reduce_state_t const reduce_state, const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_atomic_compare_swap-NTuple{7, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_atomic_compare_swap","text":"gaspi_atomic_compare_swap(segment_id, offset, rank, comparator, val_new, val_old, timeout_ms)\n\nAtomic compare-and-swap.\n\nParameters\n\nsegment_id: Segment identifier of data.\noffset: Offset of data.\nrank: The rank where to perform the operation.\ncomparator: The comparison value for the operation.\nval_new: The new value to swap if comparison is successful.\nval_old: Output parameter with the old value (before the operation).\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_atomic_compare_swap (const gaspi_segment_id_t segment_id, const gaspi_offset_t offset, const gaspi_rank_t rank, const gaspi_atomic_value_t comparator, const gaspi_atomic_value_t val_new, gaspi_atomic_value_t * const val_old, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_atomic_fetch_add-NTuple{6, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_atomic_fetch_add","text":"gaspi_atomic_fetch_add(segment_id, offset, rank, val_add, val_old, timeout_ms)\n\nAtomic fetch-and-add\n\nwarning: Warning\nThe offset must be 8 bytes aligned.\n\nParameters\n\nsegment_id: Segment identifier where data is located.\noffset: Offset where data is located.\nrank: The rank where to perform the operation.\nval_add: The value to add.\nval_old: Output parameter with the old value (before the add operation).\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_atomic_fetch_add (const gaspi_segment_id_t segment_id, const gaspi_offset_t offset, const gaspi_rank_t rank, const gaspi_atomic_value_t val_add, gaspi_atomic_value_t * const val_old, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_atomic_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_atomic_max","text":"gaspi_atomic_max(max_value)\n\nMaximum value an gaspi_atomic_value_t can hold.\n\nParameters\n\nmax_value: Output parameter with the maximum value allowed for atomic operations.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_atomic_max(gaspi_atomic_value_t *max_value);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_barrier-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_barrier","text":"gaspi_barrier(group, timeout_ms)\n\nBarrier.\n\nParameters\n\ngroup: The group involved in the barrier.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_barrier (const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_build_infrastructure-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_build_infrastructure","text":"gaspi_build_infrastructure(build)\n\nGet current value of config build_infrastructure.\n\nParameters\n\nbuild: Output parameter with the value.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_build_infrastructure (gaspi_number_t * const build);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_config_get-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_config_get","text":"gaspi_config_get(config)\n\nGet configuration structure.\n\nParameters\n\nconfig: Output configuration structure.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_config_get (gaspi_config_t * const config);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_config_set-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_config_set","text":"gaspi_config_set(new_config)\n\nSet configuration values.\n\nParameters\n\nnew_config: The new configuration to be set.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_config_set (const gaspi_config_t new_config);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_connect-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_connect","text":"gaspi_connect(rank, timeout_ms)\n\nConnect to a determined rank to be able to communicate. It builds the required infrastructure for communication.\n\nParameters\n\nrank: Rank to connect to.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_connect (const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_cpu_frequency-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_cpu_frequency","text":"gaspi_cpu_frequency(cpu_mhz)\n\nGet the CPU frequency.\n\nParameters\n\ncpu_mhz: Output parameter with the frequency.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_cpu_frequency (gaspi_float * const cpu_mhz);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_disconnect-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_disconnect","text":"gaspi_disconnect(rank, timeout_ms)\n\nDisconnect from a particular rank.\n\nParameters\n\nrank: Rank to disconnect from.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_disconnect (const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_error_str-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_error_str","text":"gaspi_error_str(error_code)\n\nGet string describing return value. This is slightly more practical than gaspi_print_error.\n\nParameters\n\nerror_code: The return value to be described.\n\nReturns\n\nA string that describes the return value.\n\nPrototype\n\ngaspi_string_t gaspi_error_str(gaspi_return_t error_code);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_add-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_add","text":"gaspi_group_add(group, rank)\n\nAdd a given rank to a group.\n\nParameters\n\ngroup: Group to add.\nrank: Rank to add to the group.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_group_add (const gaspi_group_t group, const gaspi_rank_t rank);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_commit-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_commit","text":"gaspi_group_commit(group, timeout_ms)\n\nEstablish a group by committing it. A group needs to be committed in order to use collective operations on such group.\n\nParameters\n\ngroup: Group to commit.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_group_commit (const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_create-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_create","text":"gaspi_group_create(group)\n\nCreate a group. In case of success, a empty group is created (without members).\n\nParameters\n\ngroup: The created group.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_group_create (gaspi_group_t * const group);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_delete-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_delete","text":"gaspi_group_delete(group)\n\nDelete a given group.\n\nParameters\n\ngroup: Group to delete.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_group_delete (const gaspi_group_t group);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_max","text":"gaspi_group_max(group_max)\n\nGet the maximum number of groups allowed to be created.\n\nParameters\n\ngroup_max: Output parameter with the maximum number of groups.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_group_max (gaspi_number_t * const group_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_num","text":"gaspi_group_num(group_num)\n\nGet the current number of created groups.\n\nParameters\n\ngroup_num: Output paramter with the number of groups.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_group_num (gaspi_number_t * const group_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_ranks-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_ranks","text":"gaspi_group_ranks(group, group_ranks)\n\nGet the list of ranks forming a given group.\n\nParameters\n\ngroup: The group we are interested in.\ngroup_ranks: Output parameter: an array with the ranks belonging to the given group.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_group_ranks (const gaspi_group_t group, gaspi_rank_t * const group_ranks);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_group_size-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_group_size","text":"gaspi_group_size(group, group_size)\n\nGet the size of a given group. It returns the number of processes (ranks) in the group.\n\nParameters\n\ngroup: The group from which we want to know the size.\ngroup_size: Output parameter with the group size.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_group_size (const gaspi_group_t group, gaspi_number_t * const group_size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_initialized-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_initialized","text":"gaspi_initialized(initialized)\n\nCheck if GPI-2 is initialized\n\nParameters\n\ninitialized: Output parameter with flag value.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_initialized (gaspi_number_t * initialized);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_network_type-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_network_type","text":"gaspi_network_type(network_type)\n\nGet the network type.\n\nParameters\n\nnetwork_type: Output parameter with the network type.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_network_type (gaspi_network_t * const network_type);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_notification_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_notification_num","text":"gaspi_notification_num(notification_num)\n\nGet the number of available notification ids. Important to note is that the allowed ids are in [ 0, notification_num ) .\n\nParameters\n\nnotification_num: Output parameter with the number of available notifications ids.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_notification_num (gaspi_number_t * const notification_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_notify-NTuple{6, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_notify","text":"gaspi_notify(segment_id_remote, rank, notification_id, notification_value, queue, timeout_ms)\n\nPost a notification with a particular value to a given rank.\n\nParameters\n\nsegment_id_remote: The remote segment id.\nrank: The rank to notify.\nnotification_id: The notification id.\nnotification_value: The notification value.\nqueue: The queue to post the notification request.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_notify (const gaspi_segment_id_t segment_id_remote, const gaspi_rank_t rank, const gaspi_notification_id_t notification_id, const gaspi_notification_t notification_value, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_notify_reset-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_notify_reset","text":"gaspi_notify_reset(segment_id_local, notification_id, old_notification_val)\n\nReset a given notification (and retrieve its value).\n\nParameters\n\nsegment_id_local: The segment identifier.\nnotification_id: The notification identifier to reset.\nold_notification_val: Output parameter with the value of the notification (before the reset).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_notify_reset (const gaspi_segment_id_t segment_id_local, const gaspi_notification_id_t notification_id, gaspi_notification_t * const old_notification_val);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_notify_waitsome-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_notify_waitsome","text":"gaspi_notify_waitsome(segment_id_local, notification_begin, num, first_id, timeout_ms)\n\nWait for some notification.\n\nParameters\n\nsegment_id_local: The segment identifier.\nnotification_begin: The notification id where to start to wait.\nnum: The number of notifications to wait for.\nfirst_id: Output parameter with the identifier of a received notification.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_notify_waitsome (const gaspi_segment_id_t segment_id_local, const gaspi_notification_id_t notification_begin, const gaspi_number_t num, gaspi_notification_id_t * const first_id, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_numa_socket-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_numa_socket","text":"gaspi_numa_socket(socket)\n\nGet NUMA socket\n\nParameters\n\nsocket: Output parameter with the socket\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case GPI2 was not started with NUMA enabled.\n\nPrototype\n\ngaspi_return_t gaspi_numa_socket(gaspi_uchar * const socket);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_passive_receive-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_passive_receive","text":"gaspi_passive_receive(segment_id_local, offset_local, rem_rank, size, timeout_ms)\n\nReceive data of a given size from any rank.\n\nParameters\n\nsegment_id_local: The segment where to place the received data.\noffset_local: The local offset where to place the received data.\nrem_rank: Output parameter with the sender (rank).\nsize: The size to receive.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_passive_receive (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, gaspi_rank_t * const rem_rank, const gaspi_size_t size, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_passive_send-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_passive_send","text":"gaspi_passive_send(segment_id_local, offset_local, rank, size, timeout_ms)\n\nSend data of a given size to a given rank.\n\nParameters\n\nsegment_id_local: The local segment identifier.\noffset_local: The offset where the data to send is located.\nrank: The rank to send to.\nsize: The size of the data to send.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_passive_send (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_size_t size, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_passive_transfer_size_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_passive_transfer_size_max","text":"gaspi_passive_transfer_size_max(passive_transfer_size_max)\n\nGet the maximum allowed size (in bytes) allowed in passive communication.\n\nParameters\n\npassive_transfer_size_max: Output parameter with the maximum allowed size (in bytes) for passive communication.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_passive_transfer_size_max (gaspi_size_t * const passive_transfer_size_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_passive_transfer_size_min-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_passive_transfer_size_min","text":"gaspi_passive_transfer_size_min(passive_transfer_size_min)\n\nGet the minimum allowed size (in bytes) allowed in passive communication.\n\nParameters\n\npassive_transfer_size_min: Output parameter with the minimum allowed size (in bytes) for passive communication.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_passive_transfer_size_min (gaspi_size_t * const passive_transfer_size_min);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_print_affinity_mask-Tuple{}","page":"Reference","title":"GPI2.LibGPI2.gaspi_print_affinity_mask","text":"gaspi_print_affinity_mask()\n\nPrint the CPU's affinity mask.\n\nPrototype\n\nvoid gaspi_print_affinity_mask (void);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_print_error-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_print_error","text":"gaspi_print_error(error_code, error_message)\n\nTranslate a error code to a text message. NOTE: the parameter error_message will allocate memory which the application must de-allocate (using free())\n\nParameters\n\nerror_code: The error code to translate.\nerror_message: Output parameter with the text message.\n\nReturns\n\nGASPI_SUCCESS in case of SUCCESS, GASPI_ERR_MEMALLOC in case of error there was an error allocating the error_message buffer.\n\nPrototype\n\ngaspi_return_t gaspi_print_error( gaspi_return_t error_code, gaspi_string_t *error_message);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_init-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_init","text":"gaspi_proc_init(timeout_ms)\n\nInitialization procedure to start GPI-2. It is a non-local synchronous time-based blocking procedure.\n\nParameters\n\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_proc_init (const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_kill-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_kill","text":"gaspi_proc_kill(rank, timeout_ms)\n\nKill a given process (rank).\n\nParameters\n\nrank: Rank to kill.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_proc_kill (const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_local_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_local_num","text":"gaspi_proc_local_num(local_num)\n\nGet the number of processes (ranks) started by the application.\n\nParameters\n\nlocal_num: The number of processes (ranks) in the same node\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_proc_local_num (gaspi_rank_t * const local_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_local_rank-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_local_rank","text":"gaspi_proc_local_rank(local_rank)\n\nGet the process local rank.\n\nParameters\n\nlocal_rank: Rank within a node of calling process.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_proc_local_rank (gaspi_rank_t * const local_rank);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_num","text":"gaspi_proc_num(proc_num)\n\nGet the number of processes (ranks) started by the application.\n\nParameters\n\nproc_num: The number of processes (ranks) started by the application.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_proc_num (gaspi_rank_t * const proc_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_ping-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_ping","text":"gaspi_proc_ping(rank, tout)\n\nPing a particular proc (rank). This is useful in FT applications to determine if a rank is alive.\n\nParameters\n\nrank: The rank to ping.\ntout: A timeout value in milliseconds.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_proc_ping (const gaspi_rank_t rank, gaspi_timeout_t tout);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_rank-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_rank","text":"gaspi_proc_rank(rank)\n\nGet the process rank.\n\nParameters\n\nrank: Rank of calling process.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_proc_rank (gaspi_rank_t * const rank);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_proc_term-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_proc_term","text":"gaspi_proc_term(timeout_ms)\n\nShutdown procedure. It is a synchronous local time-based blocking operation that releases resources and performs the required clean-up.\n\nParameters\n\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_proc_term (const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_queue_create-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_queue_create","text":"gaspi_queue_create(queue, timeout_ms)\n\nCreate a new communication queue.\n\nParameters\n\nqueue: Output parameter with id of created queue.\ntimeout_ms: A timeout value in milliseconds.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_queue_create(gaspi_queue_id_t * const queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_queue_delete-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_queue_delete","text":"gaspi_queue_delete(queue)\n\nDelete a new communication queue.\n\nParameters\n\nqueue: The queue ID to delete.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_queue_delete(const gaspi_queue_id_t queue);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_queue_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_queue_max","text":"gaspi_queue_max(queue_max)\n\nGet the maximum number of queues that may be used. It is the maximum of initialized queues plus dynamically created queues.\n\nParameters\n\nqueue_max: Output parameter with maximum number of queues.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_queue_max(gaspi_number_t * const queue_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_queue_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_queue_num","text":"gaspi_queue_num(queue_num)\n\nGet the number of queue available for communication.\n\nParameters\n\nqueue_num: Output parameter with the number of queues.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_queue_num (gaspi_number_t * const queue_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_queue_size-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_queue_size","text":"gaspi_queue_size(queue, queue_size)\n\nGet the current number of elements on a given queue.\n\nParameters\n\nqueue: The queue to get the size.\nqueue_size: Output parameter with the size/elements in the queue.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_queue_size (const gaspi_queue_id_t queue, gaspi_number_t * const queue_size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_queue_size_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_queue_size_max","text":"gaspi_queue_size_max(queue_size_max)\n\nGet the maximum number of elements that can be posted to a queue (outstanding requests).\n\nParameters\n\nqueue_size_max: Output parameter with the maximum number of requests that can be posted to a queue.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_queue_size_max (gaspi_number_t * const queue_size_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_read-NTuple{8, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_read","text":"gaspi_read(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nOne-sided read.\n\nParameters\n\nsegment_id_local: The local segment id where data will be placed.\noffset_local: The local offset where the data will be placed.\nrank: The rank from which we want to read.\nsegment_id_remote: The remote segment id to read from.\noffset_remote: The remote offset where to read from.\nsize: The size of data to read.\nqueue: The queue where to post the read request.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_read (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_read_list-NTuple{9, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_read_list","text":"gaspi_read_list(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nList of reads.\n\nParameters\n\nnum: The number of list elements.\nsegment_id_local: List of local segments where data will be placed.\noffset_local: List of local offsets where data will be placed.\nrank: Rank from which will be read.\nsegment_id_remote: List of remote segments to read from.\noffset_remote: List of remote offsets to read from.\nsize: List of sizes to read.\nqueue: The queue where to post the list.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_read_list (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_read_list_notify-NTuple{11, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_read_list_notify","text":"gaspi_read_list_notify(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, segment_id_notification, notification_id, queue, timeout_ms)\n\nRead from different locations on a given rank and notify on local side.\n\nParameters\n\nnum: The number of elements in the list.\nsegment_id_local: The list of local segments where data is located.\noffset_local: The list of local offsets where data to write is located.\nrank: The rank where to write the list and notification.\nsegment_id_remote: The list of remote segments where to write.\noffset_remote: The list of remote offsets where to write.\nsize: The list of sizes to write.\nsegment_id_notification: The segment id used for notification.\nnotification_id: The notification identifier to use.\nqueue: The queue where to post the request.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_read_list_notify (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_segment_id_t segment_id_notification, const gaspi_notification_id_t notification_id, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_read_notify-NTuple{9, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_read_notify","text":"gaspi_read_notify(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, notification_id, queue, timeout_ms)\n\nRead data from a given rank with a notification on the local side.\n\nParameters\n\nsegment_id_local: The segment identifier where data to be written is located.\noffset_local: The offset where the data to be written is located.\nrank: The rank where to write and notify.\nsegment_id_remote: The remote segment identifier where to write the data to.\noffset_remote: The remote offset where to write to.\nsize: The size of the data to write.\nnotification_id: The notification identifier to use.\nqueue: The queue where to post the request.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_read_notify (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_notification_id_t notification_id, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_rw_list_elem_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_rw_list_elem_max","text":"gaspi_rw_list_elem_max(elem_max)\n\nGet the maximum number of elements allowed in list (read, write) operations.\n\nParameters\n\nelem_max: Output parameter with the maximum number of elements.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_rw_list_elem_max (gaspi_number_t * const elem_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_alloc-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_alloc","text":"gaspi_segment_alloc(segment_id, size, alloc_policy)\n\nAllocate a segment.\n\nParameters\n\nsegment_id: The segment identifier to be created.\nsize: The size of the segment to be created.\nalloc_policy: The allocation policy.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_alloc (const gaspi_segment_id_t segment_id, const gaspi_size_t size, const gaspi_alloc_t alloc_policy);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_avail_local-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_avail_local","text":"gaspi_segment_avail_local(avail_seg_id)\n\nGet an available segment id (only locally).\n\nTo create/alloc a segment, the application must provide a segment id. This provides a helper function to find the next available id locally i.e. for the calling rank.\n\nParameters\n\navail_seg_id: The available segment id.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_avail_local (gaspi_segment_id_t* const avail_seg_id);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_bind-NTuple{4, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_bind","text":"gaspi_segment_bind(segment_id, pointer, size, memory_description)\n\nUse a user-provided buffer as a segment.\n\nParameters\n\nsegment_id: The segment identifier to be used.\npointer: The buffer address to use.\nsize: The size of segment.\nmemory_description: A description of the memory to be used.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_bind (gaspi_segment_id_t const segment_id, gaspi_pointer_t const pointer, gaspi_size_t const size, gaspi_memory_description_t const memory_description);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_create-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_create","text":"gaspi_segment_create(segment_id, size, group, timeout_ms, alloc_policy)\n\nCreate a segment. It is semantically equivalent to a collective aggregation of gaspi_segment_ alloc, gaspi_segment_register and gaspi_barrier involving all of the mem- bers of a given group.\n\nParameters\n\nsegment_id: The segment id to identify the segment.\nsize: The size of the segment (in bytes).\ngroup: The group of ranks with which the segment should be registered.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\nalloc_policy: Memory allocation policy.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_segment_create (const gaspi_segment_id_t segment_id, const gaspi_size_t size, const gaspi_group_t group, const gaspi_timeout_t timeout_ms, const gaspi_alloc_t alloc_policy);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_delete-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_delete","text":"gaspi_segment_delete(segment_id)\n\nDelete a given segment.\n\nParameters\n\nsegment_id: The segment identifier to be deleted.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_delete (const gaspi_segment_id_t segment_id);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_list-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_list","text":"gaspi_segment_list(num, segment_id_list)\n\nGet a list of locally allocated segments ID's.\n\nParameters\n\nnum: The number of segments.\nsegment_id_list: Output parameter with an array wit the id's of the allocated segments.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_list (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_list);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_max","text":"gaspi_segment_max(segment_max)\n\nGet the maximum number of segments allowed to be allocated/created.\n\nParameters\n\nsegment_max: Output paramter with the maximum number of segments.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_max (gaspi_number_t * const segment_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_num","text":"gaspi_segment_num(segment_num)\n\nGet the number of allocated segments.\n\nParameters\n\nsegment_num: Output parameter with the number of allocated segments.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_num (gaspi_number_t * const segment_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_ptr-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_ptr","text":"gaspi_segment_ptr(segment_id, ptr)\n\nGet the pointer to the location of a given segment.\n\nParameters\n\nsegment_id: The segment identifier.\nptr: Output parameter with the pointer to the memory segment.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_ptr (const gaspi_segment_id_t segment_id, gaspi_pointer_t * ptr);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_register-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_register","text":"gaspi_segment_register(segment_id, rank, timeout_ms)\n\nRegister a segment for communication. In case of success, the segment can be used for communication between the involved ranks.\n\nParameters\n\nsegment_id: Segment identified to be registered.\nrank: The rank to register this segment with.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_segment_register (const gaspi_segment_id_t segment_id, const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_size-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_size","text":"gaspi_segment_size(segment_id, rank, size)\n\nGet the size of a given segment on a particular rank.\n\nParameters\n\nsegment_id: The segment id we are interested in.\nrank: The rank.\nsize: Output parameter with the size of the segment.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_segment_size (const gaspi_segment_id_t segment_id, const gaspi_rank_t rank, gaspi_size_t * const size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_segment_use-NTuple{6, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_segment_use","text":"gaspi_segment_use(segment_id, pointer, size, group, timeout, memory_description)\n\nUse a user-provided buffer as a segment.\n\nParameters\n\nsegment_id: The segment identifier to be used.\npointer: The buffer address to use.\nsize: The size of segment.\ngroup: The group participating in the operation.\ntimeout: The operation timeout (in milliseconds).\nmemory_description: A description of the memory to be used.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_segment_use (gaspi_segment_id_t const segment_id, gaspi_pointer_t const pointer, gaspi_size_t const size, gaspi_group_t const group, gaspi_timeout_t const timeout, gaspi_memory_description_t const memory_description);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_set_socket_affinity-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_set_socket_affinity","text":"gaspi_set_socket_affinity(socket)\n\nSet socket affinity\n\nPrototype\n\ngaspi_return_t gaspi_set_socket_affinity (const gaspi_uchar socket);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_state_vec_get-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_state_vec_get","text":"gaspi_state_vec_get(state_vector)\n\nGet the state vector.\n\nParameters\n\nstate_vector: Vector with state of each rank. The vector must be allocated with enough place to hold the state of all ranks.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_state_vec_get (gaspi_state_vector_t state_vector);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_statistic_counter_get-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_statistic_counter_get","text":"gaspi_statistic_counter_get(counter, argument, value)\n\nGet statistical counter.\n\nParameters\n\ncounter: the counter to be retrieved.\nargument: the argument for the counter.\nvalue: Output paramter with the current value of the counter.\n\nReturns\n\nGASPI_SUCCESS in case of SUCCESS, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_statistic_counter_get ( gaspi_statistic_counter_t counter, gaspi_number_t argument, unsigned long *value);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_statistic_counter_info-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_statistic_counter_info","text":"gaspi_statistic_counter_info(counter, counter_argument, counter_name, counter_description, verbosity_level)\n\nGet information about a counter.\n\nParameters\n\ncounter: the counter.\ncounter_argument: Output parameter with meaning of the counter.\ncounter_name: Output parameter with the name of the counter.\ncounter_description: Output parameter with a more detailed description of the counter.\nverbosity_level: Output parameter with the minumum verbosity level to activate the counter.\n\nReturns\n\nGASPI_SUCCESS in case of SUCCESS, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_statistic_counter_info( gaspi_statistic_counter_t counter, gaspi_statistic_argument_t* counter_argument, gaspi_string_t* counter_name, gaspi_string_t* counter_description, gaspi_number_t* verbosity_level);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_statistic_counter_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_statistic_counter_max","text":"gaspi_statistic_counter_max(counter_max)\n\nGet the maximum number of statistics counters.\n\nParameters\n\ncounter_max: Output parameter with the maximum number of counters.\n\nReturns\n\nGASPI_SUCCESS in case of SUCCESS, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_statistic_counter_max(gaspi_number_t* counter_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_statistic_counter_reset-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_statistic_counter_reset","text":"gaspi_statistic_counter_reset(counter)\n\nReset a counter (set to 0).\n\nParameters\n\ncounter: The counter to reset.\n\nReturns\n\nGASPI_SUCCESS in case of SUCCESS, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_statistic_counter_reset (gaspi_statistic_counter_t counter);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_statistic_verbosity_level-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_statistic_verbosity_level","text":"gaspi_statistic_verbosity_level(_verbosity_level)\n\nSet the verbosity level.\n\nParameters\n\n_verbosity_level: the level of desired verbosity\n\nReturns\n\nGASPI_SUCCESS in case of SUCCESS, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_statistic_verbosity_level(gaspi_number_t _verbosity_level);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_get_num_cores-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_get_num_cores","text":"gaspi_threads_get_num_cores(cores)\n\nGet total number of available cpu cores\n\nParameters\n\ncores: Output paramter with the number of cores.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_get_num_cores(gaspi_int * const cores) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_get_tid-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_get_tid","text":"gaspi_threads_get_tid(tid)\n\nGet thread identifier\n\nParameters\n\nOutput: parameter with thread identifier\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_get_tid(gaspi_int * const tid) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_get_total-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_get_total","text":"gaspi_threads_get_total(num)\n\nGet total number of threads\n\nParameters\n\nOutput: parameter with total number of threads\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_get_total(gaspi_int *const num) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_init-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_init","text":"gaspi_threads_init(num)\n\nInitialize threads (in all available cores)\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_init(gaspi_int * const num) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_init_user-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_init_user","text":"gaspi_threads_init_user(use_nr_of_threads)\n\nInitialize threads (a particular number of threads)\n\nParameters\n\nuse_nr_of_threads: Number of threads to start.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_init_user(const unsigned int use_nr_of_threads) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_register-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_register","text":"gaspi_threads_register(tid)\n\nRegister a thread with the pool.\n\nParameters\n\ntid: Output parameter with the thread identifier.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_register(gaspi_int * tid);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_run-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_run","text":"gaspi_threads_run(_function, arg)\n\nRun a particular task (function)\n\nParameters\n\nfunction: The function to run.\narg: The arguments of the function to run.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_run(void* (*function)(void*), void *arg) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_sync-Tuple{}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_sync","text":"gaspi_threads_sync()\n\nSynchronize all local threads (local barrier).\n\nPrototype\n\nvoid gaspi_threads_sync(void);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_sync_all-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_sync_all","text":"gaspi_threads_sync_all(g, timeout_ms)\n\nSynchronize all threads in a group (global barrier). Implies a gaspi_barrier within the group.\n\nParameters\n\ngroup: The group involved in the barrier.\ntimeout: The timeout to be applied in the global barrier(gaspi_barrier).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_sync_all(const gaspi_group_t g, const gaspi_timeout_t timeout_ms) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_threads_term-Tuple{}","page":"Reference","title":"GPI2.LibGPI2.gaspi_threads_term","text":"gaspi_threads_term()\n\nFinalize threads\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_threads_term(void) __attribute__ ((deprecated));\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_time_get-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_time_get","text":"gaspi_time_get(wtime)\n\nGet elapsed time (in milliseconds).\n\nParameters\n\nwtime: Output parameter with the time in milliseconds.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_time_get (gaspi_time_t * const wtime);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_time_ticks-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_time_ticks","text":"gaspi_time_ticks(ticks)\n\nGet the number of cycles (ticks).\n\nParameters\n\nticks: Output parameter with the ticks.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_time_ticks (gaspi_cycles_t * const ticks);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_transfer_size_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_transfer_size_max","text":"gaspi_transfer_size_max(transfer_size_max)\n\nGet the maximum size (in bytes) that can be communicated in a single request (read, write, etc.).\n\nParameters\n\ntransfer_size_max: Output parameter with the maximum transfer size.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_transfer_size_max (gaspi_size_t * const transfer_size_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_transfer_size_min-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_transfer_size_min","text":"gaspi_transfer_size_min(transfer_size_min)\n\nGet the minimum size (in bytes) that can be communicated in a single request (write, read, etc.)\n\nParameters\n\ntransfer_size_min: Output parameter with the minimum size that be transfered.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_transfer_size_min (gaspi_size_t * const transfer_size_min);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_version-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_version","text":"gaspi_version(version)\n\nGet version number.\n\nParameters\n\nversion: Output parameter with version number.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error.\n\nPrototype\n\ngaspi_return_t gaspi_version (float *version);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_wait-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_wait","text":"gaspi_wait(queue, timeout_ms)\n\nWait for requests posted to a given queue.\n\nParameters\n\nqueue: Queue to wait for.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_wait (const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_write-NTuple{8, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_write","text":"gaspi_write(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nOne-sided write.\n\nParameters\n\nsegment_id_local: The local segment id with the data to write.\noffset_local: The local offset with the data to write.\nrank: The rank to which we want to write.\nsegment_id_remote: The remote segment id to write to.\noffset_remote: The remote offset where to write to.\nsize: The size of data to write.\nqueue: The queue where to post the write request.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_write (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_write_list-NTuple{9, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_write_list","text":"gaspi_write_list(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nList of writes.\n\nParameters\n\nnum: The number of list elements (see also gaspi_rw_list_elem_max)\nsegment_id_local: List of local segments with data to be written.\noffset_local: List of local offsets with data to be written.\nrank: Rank to which will be written.\nsegment_id_remote: List of remote segments to write to.\noffset_remote: List of remote offsets to write to.\nsize: List of sizes to write.\nqueue: The queue where to post the list.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_write_list (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_write_list_notify-NTuple{12, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_write_list_notify","text":"gaspi_write_list_notify(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, segment_id_notification, notification_id, notification_value, queue, timeout_ms)\n\nWrite to different locations and notify that particular rank.\n\nParameters\n\nnum: The number of elements in the list.\nsegment_id_local: The list of local segments where data is located.\noffset_local: The list of local offsets where data to write is located.\nrank: The rank where to write the list and notification.\nsegment_id_remote: The list of remote segments where to write.\noffset_remote: The list of remote offsets where to write.\nsize: The list of sizes to write.\nsegment_id_notification: The segment id used for notification.\nnotification_id: The notification identifier to use.\nnotification_value: The notification value to send.\nqueue: The queue where to post the request.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_write_list_notify (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_segment_id_t segment_id_notification, const gaspi_notification_id_t notification_id, const gaspi_notification_t notification_value, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.gaspi_write_notify-NTuple{10, Any}","page":"Reference","title":"GPI2.LibGPI2.gaspi_write_notify","text":"gaspi_write_notify(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, notification_id, notification_value, queue, timeout_ms)\n\nWrite data to a given node and notify it.\n\nParameters\n\nsegment_id_local: The segment identifier where data to be written is located.\noffset_local: The offset where the data to be written is located.\nrank: The rank where to write and notify.\nsegment_id_remote: The remote segment identifier where to write the data to.\noffset_remote: The remote offset where to write to.\nsize: The size of the data to write.\nnotification_id: The notification identifier to use.\nnotification_value: The notification value used.\nqueue: The queue where to post the request.\ntimeout_ms: Timeout in milliseconds (or GASPI_BLOCK/GASPI_TEST).\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_QUEUE_FULL if the requested could not be posted because the provided queue is full, GASPI_ERROR in case of error, GASPI_TIMEOUT in case of timeout.\n\nPrototype\n\ngaspi_return_t gaspi_write_notify (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_notification_id_t notification_id, const gaspi_notification_t notification_value, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_allreduce-NTuple{7, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_allreduce","text":"pgaspi_allreduce(buffer_send, buffer_receive, num, operation, datatyp, group, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_allreduce (const gaspi_pointer_t buffer_send, gaspi_pointer_t const buffer_receive, const gaspi_number_t num, const gaspi_operation_t operation, const gaspi_datatype_t datatyp, const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_allreduce_buf_size-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_allreduce_buf_size","text":"pgaspi_allreduce_buf_size(buf_size)\n\nPrototype\n\ngaspi_return_t pgaspi_allreduce_buf_size (gaspi_size_t * const buf_size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_allreduce_elem_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_allreduce_elem_max","text":"pgaspi_allreduce_elem_max(elem_max)\n\nPrototype\n\ngaspi_return_t pgaspi_allreduce_elem_max (gaspi_number_t * const elem_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_allreduce_user-NTuple{8, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_allreduce_user","text":"pgaspi_allreduce_user(buffer_send, buffer_receive, num, element_size, reduce_operation, reduce_state, group, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_allreduce_user (const gaspi_pointer_t buffer_send, gaspi_pointer_t const buffer_receive, const gaspi_number_t num, const gaspi_size_t element_size, gaspi_reduce_operation_t const reduce_operation, gaspi_reduce_state_t const reduce_state, const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_atomic_compare_swap-NTuple{7, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_atomic_compare_swap","text":"pgaspi_atomic_compare_swap(segment_id, offset, rank, comparator, val_new, val_old, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_atomic_compare_swap (const gaspi_segment_id_t segment_id, const gaspi_offset_t offset, const gaspi_rank_t rank, const gaspi_atomic_value_t comparator, const gaspi_atomic_value_t val_new, gaspi_atomic_value_t * const val_old, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_atomic_fetch_add-NTuple{6, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_atomic_fetch_add","text":"pgaspi_atomic_fetch_add(segment_id, offset, rank, val_add, val_old, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_atomic_fetch_add (const gaspi_segment_id_t segment_id, const gaspi_offset_t offset, const gaspi_rank_t rank, const gaspi_atomic_value_t val_add, gaspi_atomic_value_t * const val_old, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_barrier-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_barrier","text":"pgaspi_barrier(group, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_barrier (const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_config_get-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_config_get","text":"pgaspi_config_get(config)\n\nPrototype\n\ngaspi_return_t pgaspi_config_get (gaspi_config_t * const config);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_config_set-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_config_set","text":"pgaspi_config_set(new_config)\n\nPrototype\n\ngaspi_return_t pgaspi_config_set (const gaspi_config_t new_config);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_connect-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_connect","text":"pgaspi_connect(rank, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_connect (const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_cpu_frequency-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_cpu_frequency","text":"pgaspi_cpu_frequency(cpu_mhz)\n\nPrototype\n\ngaspi_return_t pgaspi_cpu_frequency (gaspi_float * const cpu_mhz);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_disconnect-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_disconnect","text":"pgaspi_disconnect(rank, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_disconnect (const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_error_str-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_error_str","text":"pgaspi_error_str(error_code)\n\nPrototype\n\ngaspi_string_t pgaspi_error_str(gaspi_return_t error_code);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_add-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_add","text":"pgaspi_group_add(group, rank)\n\nPrototype\n\ngaspi_return_t pgaspi_group_add (const gaspi_group_t group, const gaspi_rank_t rank);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_commit-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_commit","text":"pgaspi_group_commit(group, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_group_commit (const gaspi_group_t group, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_create-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_create","text":"pgaspi_group_create(group)\n\nPrototype\n\ngaspi_return_t pgaspi_group_create (gaspi_group_t * const group);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_delete-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_delete","text":"pgaspi_group_delete(group)\n\nPrototype\n\ngaspi_return_t pgaspi_group_delete (const gaspi_group_t group);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_max","text":"pgaspi_group_max(group_max)\n\nPrototype\n\ngaspi_return_t pgaspi_group_max (gaspi_number_t * const group_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_num","text":"pgaspi_group_num(group_num)\n\nPrototype\n\ngaspi_return_t pgaspi_group_num (gaspi_number_t * const group_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_ranks-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_ranks","text":"pgaspi_group_ranks(group, group_ranks)\n\nPrototype\n\ngaspi_return_t pgaspi_group_ranks (const gaspi_group_t group, gaspi_rank_t * const group_ranks);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_group_size-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_group_size","text":"pgaspi_group_size(group, group_size)\n\nPrototype\n\ngaspi_return_t pgaspi_group_size (const gaspi_group_t group, gaspi_number_t * const group_size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_initialized-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_initialized","text":"pgaspi_initialized(initialized)\n\nPrototype\n\ngaspi_return_t pgaspi_initialized (gaspi_number_t * initialized);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_network_type-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_network_type","text":"pgaspi_network_type(network_type)\n\nPrototype\n\ngaspi_return_t pgaspi_network_type (gaspi_network_t * const network_type);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_notification_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_notification_num","text":"pgaspi_notification_num(notification_num)\n\nPrototype\n\ngaspi_return_t pgaspi_notification_num (gaspi_number_t * const notification_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_notify-NTuple{6, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_notify","text":"pgaspi_notify(segment_id_remote, rank, notification_id, notification_value, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_notify (const gaspi_segment_id_t segment_id_remote, const gaspi_rank_t rank, const gaspi_notification_id_t notification_id, const gaspi_notification_t notification_value, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_notify_reset-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_notify_reset","text":"pgaspi_notify_reset(segment_id_local, notification_id, old_notification_val)\n\nPrototype\n\ngaspi_return_t pgaspi_notify_reset (const gaspi_segment_id_t segment_id_local, const gaspi_notification_id_t notification_id, gaspi_notification_t * const old_notification_val);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_notify_waitsome-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_notify_waitsome","text":"pgaspi_notify_waitsome(segment_id_local, notification_begin, num, first_id, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_notify_waitsome (const gaspi_segment_id_t segment_id_local, const gaspi_notification_id_t notification_begin, const gaspi_number_t num, gaspi_notification_id_t * const first_id, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_numa_socket-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_numa_socket","text":"pgaspi_numa_socket(socket)\n\nPrototype\n\ngaspi_return_t pgaspi_numa_socket(gaspi_uchar * const socket);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_passive_receive-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_passive_receive","text":"pgaspi_passive_receive(segment_id_local, offset_local, rem_rank, size, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_passive_receive (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, gaspi_rank_t * const rem_rank, const gaspi_size_t size, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_passive_send-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_passive_send","text":"pgaspi_passive_send(segment_id_local, offset_local, rank, size, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_passive_send (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_size_t size, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_passive_transfer_size_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_passive_transfer_size_max","text":"pgaspi_passive_transfer_size_max(passive_transfer_size_max)\n\nPrototype\n\ngaspi_return_t pgaspi_passive_transfer_size_max (gaspi_size_t * const passive_transfer_size_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_print_affinity_mask-Tuple{}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_print_affinity_mask","text":"pgaspi_print_affinity_mask()\n\nPrototype\n\nvoid pgaspi_print_affinity_mask (void);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_proc_init-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_proc_init","text":"pgaspi_proc_init(timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_proc_init (const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_proc_kill-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_proc_kill","text":"pgaspi_proc_kill(rank, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_proc_kill (const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_proc_local_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_proc_local_num","text":"pgaspi_proc_local_num(local_num)\n\nPrototype\n\ngaspi_return_t pgaspi_proc_local_num (gaspi_rank_t * const local_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_proc_local_rank-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_proc_local_rank","text":"pgaspi_proc_local_rank(local_rank)\n\nPrototype\n\ngaspi_return_t pgaspi_proc_local_rank (gaspi_rank_t * const local_rank);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_proc_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_proc_num","text":"pgaspi_proc_num(proc_num)\n\nPrototype\n\ngaspi_return_t pgaspi_proc_num (gaspi_rank_t * const proc_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_proc_rank-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_proc_rank","text":"pgaspi_proc_rank(rank)\n\nPrototype\n\ngaspi_return_t pgaspi_proc_rank (gaspi_rank_t * const rank);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_proc_term-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_proc_term","text":"pgaspi_proc_term(timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_proc_term (const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_queue_create-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_queue_create","text":"pgaspi_queue_create(queue_id, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_queue_create(gaspi_queue_id_t * const queue_id, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_queue_delete-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_queue_delete","text":"pgaspi_queue_delete(queue_id)\n\nPrototype\n\ngaspi_return_t pgaspi_queue_delete(const gaspi_queue_id_t queue_id);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_queue_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_queue_max","text":"pgaspi_queue_max(queue_max)\n\nPrototype\n\ngaspi_return_t pgaspi_queue_max(gaspi_number_t * const queue_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_queue_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_queue_num","text":"pgaspi_queue_num(queue_num)\n\nPrototype\n\ngaspi_return_t pgaspi_queue_num (gaspi_number_t * const queue_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_queue_purge-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_queue_purge","text":"pgaspi_queue_purge(queue, timeout_ms)\n\nPurge queue.\n\nParameters\n\nqueue: The queue to purge.\ntimeout_ms: Timeout for operation.\n\nReturns\n\nGASPI_SUCCESS in case of success, GASPI_ERROR in case of error or GASPI_TIMEOUT in case time has expired.\n\nPrototype\n\ngaspi_return_t pgaspi_queue_purge(const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_queue_size-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_queue_size","text":"pgaspi_queue_size(queue, queue_size)\n\nPrototype\n\ngaspi_return_t pgaspi_queue_size (const gaspi_queue_id_t queue, gaspi_number_t * const queue_size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_queue_size_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_queue_size_max","text":"pgaspi_queue_size_max(queue_size_max)\n\nPrototype\n\ngaspi_return_t pgaspi_queue_size_max (gaspi_number_t * const queue_size_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_read-NTuple{8, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_read","text":"pgaspi_read(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_read (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_read_list-NTuple{9, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_read_list","text":"pgaspi_read_list(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_read_list (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_read_list_notify-NTuple{11, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_read_list_notify","text":"pgaspi_read_list_notify(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, segment_id_notification, notification_id, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_read_list_notify (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_segment_id_t segment_id_notification, const gaspi_notification_id_t notification_id, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_read_notify-NTuple{9, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_read_notify","text":"pgaspi_read_notify(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, notification_id, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_read_notify (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_notification_id_t notification_id, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_rw_list_elem_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_rw_list_elem_max","text":"pgaspi_rw_list_elem_max(elem_max)\n\nPrototype\n\ngaspi_return_t pgaspi_rw_list_elem_max (gaspi_number_t * const elem_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_alloc-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_alloc","text":"pgaspi_segment_alloc(segment_id, size, alloc_policy)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_alloc (const gaspi_segment_id_t segment_id, const gaspi_size_t size, const gaspi_alloc_t alloc_policy);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_bind-NTuple{4, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_bind","text":"pgaspi_segment_bind(segment_id, pointer, size, memory_description)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_bind ( gaspi_segment_id_t const segment_id, gaspi_pointer_t const pointer, gaspi_size_t const size, gaspi_memory_description_t const memory_description);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_create-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_create","text":"pgaspi_segment_create(segment_id, size, group, timeout_ms, alloc_policy)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_create (const gaspi_segment_id_t segment_id, const gaspi_size_t size, const gaspi_group_t group, const gaspi_timeout_t timeout_ms, const gaspi_alloc_t alloc_policy);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_delete-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_delete","text":"pgaspi_segment_delete(segment_id)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_delete (const gaspi_segment_id_t segment_id);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_list-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_list","text":"pgaspi_segment_list(num, segment_id_list)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_list (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_list);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_max","text":"pgaspi_segment_max(segment_max)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_max (gaspi_number_t * const segment_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_num-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_num","text":"pgaspi_segment_num(segment_num)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_num (gaspi_number_t * const segment_num);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_ptr-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_ptr","text":"pgaspi_segment_ptr(segment_id, ptr)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_ptr (const gaspi_segment_id_t segment_id, gaspi_pointer_t * ptr);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_register-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_register","text":"pgaspi_segment_register(segment_id, rank, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_register (const gaspi_segment_id_t segment_id, const gaspi_rank_t rank, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_size-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_size","text":"pgaspi_segment_size(segment_id, rank, size)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_size (const gaspi_segment_id_t segment_id, const gaspi_rank_t rank, gaspi_size_t * const size);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_segment_use-NTuple{6, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_segment_use","text":"pgaspi_segment_use(segment_id, pointer, size, group, timeout, memory_description)\n\nPrototype\n\ngaspi_return_t pgaspi_segment_use ( gaspi_segment_id_t const segment_id, gaspi_pointer_t const pointer, gaspi_size_t const size, gaspi_group_t const group, gaspi_timeout_t const timeout, gaspi_memory_description_t const memory_description);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_set_socket_affinity-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_set_socket_affinity","text":"pgaspi_set_socket_affinity(socket)\n\nPrototype\n\ngaspi_return_t pgaspi_set_socket_affinity (const gaspi_uchar socket);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_state_vec_get-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_state_vec_get","text":"pgaspi_state_vec_get(state_vector)\n\nPrototype\n\ngaspi_return_t pgaspi_state_vec_get (gaspi_state_vector_t state_vector);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_statistic_counter_get-Tuple{Any, Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_statistic_counter_get","text":"pgaspi_statistic_counter_get(counter, argument, valu)\n\nPrototype\n\ngaspi_return_t pgaspi_statistic_counter_get (gaspi_statistic_counter_t counter, gaspi_number_t argument, unsigned long *valu);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_statistic_counter_info-NTuple{5, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_statistic_counter_info","text":"pgaspi_statistic_counter_info(counter, counter_argument, counter_name, counter_description, verbosity_leve)\n\nPrototype\n\ngaspi_return_t pgaspi_statistic_counter_info(gaspi_statistic_counter_t counter, gaspi_statistic_argument_t* counter_argument, gaspi_string_t* counter_name, gaspi_string_t* counter_description, gaspi_number_t* verbosity_leve);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_statistic_counter_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_statistic_counter_max","text":"pgaspi_statistic_counter_max(counter_max)\n\nPrototype\n\ngaspi_return_t pgaspi_statistic_counter_max(gaspi_statistic_counter_t* counter_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_statistic_counter_reset-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_statistic_counter_reset","text":"pgaspi_statistic_counter_reset(counter)\n\nPrototype\n\ngaspi_return_t pgaspi_statistic_counter_reset (gaspi_statistic_counter_t counter);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_statistic_verbosity_level-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_statistic_verbosity_level","text":"pgaspi_statistic_verbosity_level(_verbosity_level)\n\nPrototype\n\ngaspi_return_t pgaspi_statistic_verbosity_level(gaspi_number_t _verbosity_level);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_time_get-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_time_get","text":"pgaspi_time_get(wtime)\n\nPrototype\n\ngaspi_return_t pgaspi_time_get (gaspi_time_t * const wtime);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_time_ticks-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_time_ticks","text":"pgaspi_time_ticks(ticks)\n\nPrototype\n\ngaspi_return_t pgaspi_time_ticks (gaspi_cycles_t * const ticks);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_transfer_size_max-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_transfer_size_max","text":"pgaspi_transfer_size_max(transfer_size_max)\n\nPrototype\n\ngaspi_return_t pgaspi_transfer_size_max (gaspi_size_t * const transfer_size_max);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_transfer_size_min-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_transfer_size_min","text":"pgaspi_transfer_size_min(transfer_size_min)\n\nPrototype\n\ngaspi_return_t pgaspi_transfer_size_min (gaspi_size_t * const transfer_size_min);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_version-Tuple{Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_version","text":"pgaspi_version(version)\n\nPrototype\n\ngaspi_return_t pgaspi_version (float *version);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_wait-Tuple{Any, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_wait","text":"pgaspi_wait(queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_wait (const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_write-NTuple{8, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_write","text":"pgaspi_write(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_write (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_write_list-NTuple{9, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_write_list","text":"pgaspi_write_list(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_write_list (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_write_list_notify-NTuple{12, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_write_list_notify","text":"pgaspi_write_list_notify(num, segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, segment_id_notification, notification_id, notification_value, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_write_list_notify (const gaspi_number_t num, gaspi_segment_id_t * const segment_id_local, gaspi_offset_t * const offset_local, const gaspi_rank_t rank, gaspi_segment_id_t * const segment_id_remote, gaspi_offset_t * const offset_remote, gaspi_size_t * const size, const gaspi_segment_id_t segment_id_notification, const gaspi_notification_id_t notification_id, const gaspi_notification_t notification_value, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"reference/#GPI2.LibGPI2.pgaspi_write_notify-NTuple{10, Any}","page":"Reference","title":"GPI2.LibGPI2.pgaspi_write_notify","text":"pgaspi_write_notify(segment_id_local, offset_local, rank, segment_id_remote, offset_remote, size, notification_id, notification_value, queue, timeout_ms)\n\nPrototype\n\ngaspi_return_t pgaspi_write_notify (const gaspi_segment_id_t segment_id_local, const gaspi_offset_t offset_local, const gaspi_rank_t rank, const gaspi_segment_id_t segment_id_remote, const gaspi_offset_t offset_remote, const gaspi_size_t size, const gaspi_notification_id_t notification_id, const gaspi_notification_t notification_value, const gaspi_queue_id_t queue, const gaspi_timeout_t timeout_ms);\n\n\n\n\n\n","category":"method"},{"location":"#GPI2.jl","page":"Home","title":"GPI2.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"(Image: Docs-stable) (Image: Docs-dev) (Image: Build Status) (Image: Coverage Status) (Image: License: MIT)","category":"page"},{"location":"","page":"Home","title":"Home","text":"GPI2.jl is a lightweight Julia wrapper for the GASPI-conforming GPI-2 library.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you have not yet installed Julia, please follow the instructions for your operating system. GPI2.jl works with Julia v1.7. Since GPI-2 only works on Linux systems, GPI2.jl is also restricted to this platform.","category":"page"},{"location":"","page":"Home","title":"Home","text":"GPI2.jl is a registered package. Thus to install it in your default environment, execute the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using Pkg; Pkg.add(\"GPI2.jl\")'","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alternatively, you can also just clone this repository and then instantiate it, i.e., installing all dependencies:","category":"page"},{"location":"","page":"Home","title":"Home","text":"git clone https://github.com/hlrs-tasc/GPI2.jl.git\njulia --project=GPI2.jl -e 'using Pkg; Pkg.instantiate()'","category":"page"},{"location":"","page":"Home","title":"Home","text":"If you decide to use the latter approach with a cloned GPI2.jl directory, in the following, you need to add --project=path/to/GPI2.jl to the julia command, e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project=. -e 'using GPI2; ...'","category":"page"},{"location":"","page":"Home","title":"Home","text":"if you are starting Julia from within the GPI2.jl folder.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"#Getting-started","page":"Home","title":"Getting started","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"You can start running GASPI functions after executing using GPI2. All GASPI functions are prefixed by gaspi_. For example, to check the version of the currently used GPI-2 library, start the Julia REPL and paste the following snippet:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using GPI2\n\njulia> version = Ref{Cfloat}()\nBase.RefValue{Float32}(0.0f0)\n\njulia> gaspi_version(version)\nGASPI_SUCCESS::gaspi_return_t = 0\n\njulia> println(\"GPI-2 library version: $(version[])\")\nGPI-2 library version: 1.51","category":"page"},{"location":"#Parallel-execution","page":"Home","title":"Parallel execution","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To run a GPI-2 program in parallel, you need to start it with the helper script gaspi_run. It requires a machinefile with the names of the nodes on which a rank should be started, see also the GPI-2 docs. For a simple test, you can create a machinefile that will start three ranks on the current node by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"yes `hostname` | head -n 3 > machinefile","category":"page"},{"location":"","page":"Home","title":"Home","text":"For convenience, GPI2.jl provides the function gaspi_run() that will start gaspi_run for you, using the GPI2_jll.jl-provided executable. GPI2.jl also provides some example files in the examples/ folder you can check out to get started.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For example, to run the hello_world.jl example in parallel, execute the following commands from the GPI2.jl directory:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using GPI2; gaspi_run()' -- -m machinefile $(which julia) $(pwd)/examples/hello_world.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"You need julia twice in the command: The first one just executes the gaspi_run command, while the second one is the command that is executed in parallel. You also need the $(pwd) to ensure that gaspi_run picks the right file.","category":"page"},{"location":"#Issues-when-relying-on-the-module-command","page":"Home","title":"Issues when relying on the module command","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you want to start a parallel process using GPI-2's gaspi_run on a cluster where paths are set using the module command provided by, e.g., Lmod, there are some issues you need to handle in order to make a GASPI program run properly. They boil down to the fact that, as far as I can tell, GPI-2 uses SSH to set up communication between nodes and uses a non-login shell for this purpose. This means that, e.g., the module command will not work and thus you need to manually put all relevant changes to the environment variables directly in your ~/.bashrc file.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As a workaround, this repository provides two auxiliary utilities: storeenv.jl and launcher.jl. They help you to run a GPI-2-powered Julia program on a cluster with an environment modules setup by storing the entire environment and reloading it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"First, go to the folder from which you want to start your GASPI-parallelized Julia program and execute the storeenv.jl script:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia path/to/storeenv.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"The storeenv.jl script will record the current environment variables and store them in a file gaspi-jl-env.toml.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, run your Julia program in parallel with the launcher.jl script using the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using GPI2; gaspi_run()' -- -m <machinefile> $(which julia) /abs/path/to/launcher.jl $(pwd)/gaspi-jl-env.toml path/to/julia/program.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"The <machinefile> is the normal machinefile with all nodes on which to start a GASPI rank. The /abs/path/to/launcher.jl must be an absolute path again. The launcher script will take care of recreating the environment using the information in the TOML file $(pwd)/gaspi-jl-env.toml. Finally, you can provide the path to the Julia programm (and optional command line arguments to it) as the final part. The path to the Julia program may be relative or absolute, since the launcher knows your current directory by now.","category":"page"},{"location":"#Configuration","page":"Home","title":"Configuration","text":"","category":"section"},{"location":"#Using-a-system-library","page":"Home","title":"Using a system library","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"When using GPI2.jl, you can specify the path to the GASPI library you want to use. By default, GPI2.jl uses the precompiled GPI-2 library available in the GPI2_jll.jl package. This is only recommended for non-performance critical usage and/or development. To switch to a library installed on your system, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using GPI2; GPI2.use_system_library(\"path/to/libGPI2.so\")'","category":"page"},{"location":"","page":"Home","title":"Home","text":"where path/to/libGPI.so should be the path to your shared GPI-2 library. To switch back to using the JLL-provided library, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using GPI2; GPI2.use_jll_library()'","category":"page"},{"location":"","page":"Home","title":"Home","text":"After switching the library, you need to restart Julia for the changes to take effect.","category":"page"},{"location":"#Generating-C-bindings","page":"Home","title":"Generating C bindings","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"In case you are using a system-provided GPI-2 library with an API that is different to the one provided by the JLL-provided library, you need to re-generate the C bindings file LibGPI2.jl and tell the GPI2.jl package to use it.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To this end, enter the bindings/ directory and run the following command:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia --project=. -e 'using Pkg; Pkg.instantiate()' # only required once\nGPI_INCLUDE_DIR=path/to/GPI-2/include julia --project=. generator.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will create a LibGPI2.jl file in the current working directory. To switch to the custom bindings file, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using GPI2; GPI2.use_system_bindings(\"path/to/LibGPI2.jl\")'","category":"page"},{"location":"","page":"Home","title":"Home","text":"where path/to/libGPI.so should be the path to your custom C bindings file. To switch back to using the JLL-compatible library, execute","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia -e 'using GPI2; GPI2.use_jll_bindings()'","category":"page"},{"location":"","page":"Home","title":"Home","text":"After switching the C bindings, you need to restart Julia for the changes to take effect.","category":"page"},{"location":"#Authors","page":"Home","title":"Authors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPI2.jl is maintained by Michael Schlottke-Lakemper (University of Stuttgart, Germany). The GPI-2 library itself is developed by the Fraunhofer Institute for Industrial Mathematics (ITWM).","category":"page"},{"location":"#License-and-contributing","page":"Home","title":"License and contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"GPI2.jl is published under the MIT license (see License). We are very happy to accept contributions from everyone, preferably in the form of a PR. GPI-2 itself is published under the GNU General Public license, version 3.","category":"page"}]
}
